version: 2.1

workflows:
  testing:
    jobs:
      - runner-test

jobs:
  runner-test:
    machine:
      enabled: true
      image: ubuntu-2004:202010-01  # You can specify the machine image
    resource_class: sanjaypramod/runner
    environment:
      AWS_ACCESS_KEY_ID: AKIAVPAYF53GUHDSYARJ
      AWS_SECRET_ACCESS_KEY: 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
      AWS_REGION: us-east-2
      AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}
      ECR_REPOSITORY: poc-2
      EKS_CLUSTER_NAME: ${EKS_CLUSTER_NAME}
    steps:
      - checkout

      - run:
          name: Set short git commit SHA
          command: echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $BASH_ENV && source $BASH_ENV

      - run:
          name: Install AWS CLI
          command: sudo apt-get update && sudo apt-get install -y awscli

      - run:
          name: Configure AWS credentials
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region us-east-2
            # export AWS_DEFAULT_OUTPUT="json"
            aws configure set default.output json
            aws sts get-caller-identity --profile default
            aws s3 ls --profile default
            cat ~/.aws/credentials    

     - run:
         name: Build, tag, and push image to Amazon ECR
         command: |
      # Navigate to the directory containing your Dockerfile
           cd Application/Dockerfile

      # Build the Docker image with the specified tag
           docker build -t "375860358861.dkr.ecr.us-east-2.amazonaws.com/$ECR_REPOSITORY:$COMMIT_SHA" -f Dockerfile .

      # Authenticate with ECR
           aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 375860358861.dkr.ecr.us-east-2.amazonaws.com

      # Push the Docker image to ECR
          docker push "375860358861.dkr.ecr.us-east-2.amazonaws.com/$ECR_REPOSITORY:$COMMIT_SHA"

             
      # - run:
      #     name: Login to Amazon ECR
      #     command: |
      #        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 375860358861.dkr.ecr.us-east-2.amazonaws.com

      # - run:
      #     name: Build, tag, and push image to Amazon ECR
      #     command: |
      #       docker build -t "375860358861.dkr.ecr.us-east-2.amazonaws.com/$ECR_REPOSITORY:$COMMIT_SHA" -f Application/Dockerfile .
      #       docker push "375860358861.dkr.ecr.us-east-2.amazonaws.com/$ECR_REPOSITORY:$COMMIT_SHA"
            
      - run:
          name: Pritunl VPN Configuration
          command: |
            echo "deb https://repo.pritunl.com/stable/apt focal main" | sudo tee /etc/apt/sources.list.d/pritunl.list
            sudo apt --assume-yes install gnupg
            gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 7568D9BB55FF9E5287D586017AE645C0CF8E292A
            gpg --armor --export 7568D9BB55FF9E5287D586017AE645C0CF8E292A | sudo tee /etc/apt/trusted.gpg.d/pritunl.asc
            sudo apt update -y
            sudo apt install pritunl-client-electron -y
            sudo which pritunl-client
            ls
            pwd
            pritunl-client
            pritunl-client add /var/lib/circleci-runner/workdir/poc.test
            pritunl-client list
            pritunl-client start "$(pritunl-client list | awk 'NR>2 {print $2}' | tr -d '[:space:]')" --password 123456789

      - run:
          name: Update kube config
          command: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - run:
          name: Deploy to EKS
          command: helm upgrade --install nodeapp-33 helm/chart/ --set image.tag=$COMMIT_SHA
